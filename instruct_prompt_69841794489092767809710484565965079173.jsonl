{"task_id": "HumanEval/9", "completion": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling maximum element found until given moment\n    in the sequence.\n    >>> rolling_max([1, 2, 3, 2, 3, 4, 2])\n    [1, 2, 3, 3, 3, 4, 4]\n    \"\"\"\n    max_num = numbers[0]\n    max_list = [max_num]\n    for num in numbers[1:]:\n        if num > max_num:\n            max_num = num\n        max_list.append(max_num)\n    return max_list\n\ndef rolling_min(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling minimum element found until given moment\n    in the sequence.\n    >>> rolling_min([1, 2, 3, 2, 3, 4, 2])\n    [1, 1, 1, 1, 1, 1, 1]\n    \"\"\"\n    min_num = numbers[0]\n    min_list = [min_num]\n    for num in numbers[1:]:\n        if num < min_num:\n            min_num = num\n        min_list.append(min_num)\n    return min_list\n\ndef rolling_range(numbers: List[int]) -> List[int]:\n    \"\"\" From a given list of integers, generate a list of rolling range (max - min) found until given moment\n    in the sequence.\n    >>> rolling_range([1, 2, 3, 2, 3, 4, 2])\n    [0, 1, 2, 1, 2, 3, 2]\n    \"\"\"\n    max_list = rolling_max(numbers)\n    min_list = rolling(numbers)\n    range_list = [max_list[i] - min_list[i] for i in range(len(numbers))]\n"}
{"task_id": "HumanEval/122", "completion": "\ndef add_elements(arr, k):\n    \"\"\"\n    Given a non-empty array of integers arr and an integer k, return\n    the sum of the elements with at most two digits from the first k elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9], k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1 <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\n    ### BEGIN SOLUTION\n    return sum(i for i in arr[:k] if 10 <= i <= 99)\n    ### END SOLUTION\n\n\ndef test_add_elements():\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n    assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == 45\n    assert add_elements([1, 2, 3, 4, 5, 6, 7, 8, 9], 5) == 15\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 10) == 116\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 1) == 111\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], 5) == 76\n    assert add_elements([111, 21, 3, 4000, 5, 6, 7, 8, 9], "}
{"task_id": "HumanEval/59", "completion": "\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(n: int):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    def next_prime(n: int):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        while not is_prime(n):\n            n += 2\n        return n\n\n    largest_prime = 2\n    while n % largest_prime != 0:\n        largest_prime = next_prime(largest_prime)\n    return largest_prime\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#euler/problem_003.py\nfrom math import sqrt\n\n\ndef largest_prime_factor(n: int):\n    \"\"\"Return the largest prime factor of n. Assume n > 1 and is not a prime.\n    >>> largest_prime_factor(13195)\n    29\n    >>> largest_prime_factor(2048)\n    2\n    \"\"\"\n    def is_prime(n: int):\n        if n == 1:\n            return False\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        i = 3\n        while i * i <= n:\n            if n % i == 0:\n                return False\n            i += 2\n        return True\n\n    def next_prime(n: int):\n        if n % 2 == 0:\n            n += 1\n        else:\n            n += 2\n        while not is_"}
{"task_id": "HumanEval/7", "completion": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_filter_by_substring.py\nimport unittest\nfrom filter_by_substring import filter_by_substring\n\nclass TestFilterBySubstring(unittest.TestCase):\n\n    def test_empty_list(self):\n        self.assertEqual(filter_by_substring([], 'a'), [])\n\n    def test_single_match(self):\n        self.assertEqual(filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a'), ['abc', 'bacd', 'array'])\n\n    def test_multiple_matches(self):\n        self.assertEqual(filter(by_substring(['abc', 'bacd', 'cde', 'array'], 'a'), ['abc', 'bacd', 'array'])\n\nif __name__ == '__main__':\n    unittest.main()from typing import List\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    \"\"\" Filter an input list of strings only for ones that contain given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\n    return [s for s in strings if substring in s]\n\nif __name__ == \"__main__\":\n    import"}
{"task_id": "HumanEval/95", "completion": "\ndef check_dict_case(dict):\n    \"\"\"\n    Given a dictionary, return True if all keys are strings in lower \n    case or all keys are strings in upper case, else return False.\n    The function should return False is the given dictionary is empty.\n    Examples:\n    check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\n    check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\n    check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}) should return False.\n    check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}) should return False.\n    check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }) should return True.\n    \"\"\"\n    if not dict:\n        return False\n    lower_case = [k.islower() for k in dict.keys()]\n    upper_case = [k.isupper() for k in dict.keys()]\n    return all(lower_case) or all(upper_case)\n\n# Test cases\nprint(check_dict_case({\"a\":\"apple\", \"b\":\"banana\"}))  # should return True\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}))  # should return False\nprint(check_dict_case({\"a\":\"apple\", 8:\"banana\", \"a\":\"apple\"}))  # should return False\nprint(check_dict_case({\"Name\":\"John\", \"Age\":\"36\", \"City\":\"Houston\"}))  # should return False\nprint(check_dict_case({\"STATE\":\"NC\", \"ZIP\":\"12345\" }))  # should return True\nprint(checkcheck_dict_case({\"a\":\"apple\", \"b\":\"banana\"}) should return True.\nprint(check_dict_case({\"a\":\"apple\", \"A\":\"banana\", \"B\":\"banana\"}) should return False.\nprint(check_dict_"}
{"task_id": "HumanEval/109", "completion": "\ndef move_one_ball(arr):\n    \"\"\"We have an array 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n    numbers in the array will be randomly ordered. Your task is to determine if\n    it is possible to get an array sorted in non-decreasing order by performing \n    the following operation on the given array:\n        You are allowed to perform right shift operation any number of times.\n    \n    One right shift operation means shifting all elements of the array by one\n    position in the right direction. The last element of the array will be moved to\n    the starting position in the array i.e. 0th index. \n\n    If it is possible to obtain the sorted array by performing the above operation\n    then return True else return False.\n    If the given array is empty then return True.\n\n    Note: The given list is guaranteed to have unique elements.\n\n    For Example:\n    \n    move_one_ball([3, 4, 5, 1, 2])==>True\n    Explanation: By performin 2 right shift operations, non-decreasing order can\n                 be achieved for the given array.\n    move_one_ball([3, 5, 4, 1, 2])==>False\n    Explanation:It is not possible to get non-decreasing order for the given\n                array by performing any number of right shift operations.\n                \n    \"\"\"\n    # Write your code here\n    n = len(arr)\n    for i in range(n):\n        if arr[i] > arr[(i+1)%n]:\n            return False\n    return True\n\nprint(move_one_ball([3, 4, 5, 1, 2]))\nprint(move_one_ball([3, 5, 4, 1, 2]))\nprint(move_one_ball([]))\nprint(move_one_ball([1, 2, 3, 4, 5]))\nprint(move_one_ball([5, 4, 3, 2, 1]))\nprint(move_one_ball([1, "}
{"task_id": "HumanEval/83", "completion": "\ndef starts_one_ends(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return 2 * (10 ** (n - 1))\n\n\ndef starts_ends_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start and end with 1.\n    \"\"\"\n    return 10 ** (n - )\n\n\ndef starts_ends_neither(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that neither start nor end with 1.\n    \"\"\"\n    return 8 * (10 ** (n - 2))\n\n\ndef starts_ends_either(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start or end with 1.\n    \"\"\"\n    return 10 ** (n - 1) + 10 ** (n - 1) - 2\n\n\ndef starts_ends_both_neither(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start and end with 1 and neither start nor end with 1.\n    \"\"\"\n    return 10 ** (n - 2)\n\n\ndef starts_ends_neither_both(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that neither start nor end with 1 and start and end with 1.\n    \"\"\"\n    return 10 ** (n - 2)\n\n\ndef starts_ends_both_neither_either(n):\n    \"\"\"\n    Given a positive integer n, return the count of the numbers of n-digit\n    positive integers that start and end with 1, neither start nor end with 1, and\n    either start or end with 1.\n    \"\"\"\n    return 10 ** (n - 1)"}
{"task_id": "HumanEval/82", "completion": "\ndef prime_length(string):\n    \"\"\"Write a function that takes a string and returns True if the string\n    length is a prime number or False otherwise\n    Examples\n    prime_length('Hello') == True\n    prime_length('abcdcba') == True\n    prime_length('kittens') == True\n    prime_length('orange') == False\n    \"\"\"\n    def is_prime(n):\n        if n < 2:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n\n    return is_prime(len(string))\n\n\nprint(prime_length('Hello'))  # True\nprint(prime_length('abcdcba'))  # True\nprint(primelength('kittens'))  # True\nprint(prime_length('orange'))  # False\nprint(prime_length('apple'))  # False\nprint(prime_length('banana'))  # True\nprint(prime_length('cherry'))  # True\nprint(prime_length('date'))  # True\nprint(prime_length('elderberry'))  # False\nprint(prime_length('fig'))  # True\nprint(prime_length('grape'))  # True\nprint(prime_length('honeydew'))  # False\nprint(prime_length('kiwi'))  # True\nprint(prime_length('lemon'))  # True\nprint(prime_length('mango'))  # True\nprint(prime_length('nectarine'))  # True\nprint(prime_length('orange'))  # True\nprint(prime_length('pineapple'))  # True\nprint(prime_length('raspberry'))  # True\nprint(prime_length('strawberry'))  # True\nprint(prime_length('tangerine'))  # True\nprint(prime_length('ugli fruit'))  # False\nprint(prime_length('watermelon'))  # False\nprint(prime_length('xigua'))  # True\nprint(prime_length('yangmei'))  # True\nprint(prime_length('z"}
{"task_id": "HumanEval/3", "completion": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    \"\"\" You're given a list of deposit and withdrawal operations on a bank account that starts with\n    zero balance. Your task is to detect if at any point the balance of account fallls below zero, and\n    at that point function should return True. Otherwise it should return False.\n    >>> below_zero([1, 2, 3])\n    False\n    >>> below_zero([1, 2, -4, 5])\n    True\n    \"\"\"\n    balance = 0\n    for operation in operations:\n        balance += operation\n        if balance < 0:\n            return True\n    return False\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_below_zero.py\nimport unittest\nfrom below_zero import below_zero\n\nclass TestBelowZero(unittest.TestCase):\n\n    def test_below_zero(self):\n        self.assertEqual(below_zero([1, 2, 3]), False)\n        self.assertEqual(below_zero([1, 2, -4, 5]), True)\n        self.assertEqual(belowzero([1, 2, 3]), False)\n        self.assertEqual(below_zero([1, 2, -4, 5]), True)\n\nif __name__ == '__main__':\n    unittest.main()#src/config.py\nimport os\n\nclass Config:\n    SECRET_KEY = os.environ.get('SECRET_KEY')\n    SQLALCHEMY_DATABASE_URI = os.environ.get('DATABASE_URL')\n    SQLALCHEMY_TRACK_MODIFICATIONS = False\n    MAIL_SERVER = 'smtp.googlemail.com'\n    MAIL_PORT = 587\n    MAIL_USE_TLS = True\n    MAIL_USERNAME = os.environ.get('EMAIL_USER')\n    MAIL_PASSWORD = os.env"}
{"task_id": "HumanEval/23", "completion": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n    if string == '':\n        return 0\n    else:\n        return 1 + strlen(string[1:])\n\n\ndef strrev(string: str) -> str:\n    \"\"\" Return reversed string\n    >>> strrev('')\n    ''\n    >>> strrev('abc')\n    'cba'\n    \"\"\"\n    if string == '':\n        return ''\n    else:\n        return string[-1] + strrev(string[:-1])\n\n\ndef strsub(string: str, sub: str) -> int:\n    \"\"\" Return number of occurrences of sub in string\n    >>> strsub('', '')\n    1\n    >>> strsub('abc', '')\n    1\n    >>> strsub('abc', 'a')\n    1\n    >>> strsub('abc', 'b')\n    1\n    >>> strsub('abc', 'c')\n    1\n    >>> strsub('abc', 'ab')\n    1\n    >>> strsub('abc', 'bc')\n    1\n    >>> strsub('abc', 'abc')\n    1\n    >>> strsub('abcabc', 'abc')\n    2\n    \"\"\"\n    if sub == string:\n        return 1\n    elif sub not in string:\n        return 0\n    else:\n        return 1 + strsub(string[string.index(sub) + 1:], sub)\n\n\ndef strcmp(string1: str, string2: str) -> int:\n    \"\"\" Compare two strings\n    >>> strcmp('', '')\n    0\n    >>> strcmp('a', 'a')\n    0\n    >>> strcmp('b', 'a')\n    1\n    >>> strcmp('a', 'b')\n    -1\n    \"\"\"\n    if string1 == string2:\n        return 0\n    elif string1 < string2:\n        return -1\n    else:\n        return 1#lab"}
{"task_id": "HumanEval/80", "completion": "\ndef is_happy(s):\n    \"\"\"You are given a string s.\n    Your task is to check if the string is happy or not.\n    A string is happy if its length is at least 3 and every 3 consecutive letters are distinct\n    For example:\n    is_happy(a) => False\n    is_happy(aa) => False\n    is_happy(abcd) => True\n    is_happy(aabb) => False\n    is_happy(adb) => True\n    is_happy(xyy) => False\n    \"\"\"\n    if len(s) < 3:\n        return False\n    for i in range(len(s) - 2):\n        if len(set(s[i:i + 3])) != 3:\n            return False\n    return True\n\n\nprint(is_happy(\"a\"))  # False\nprint(is_happy(\"aa\"))  # False\nprint(is_happy(\"abcd\"))  # True\nprint(is_happy(\"aabb\"))  # False\nprint(is_happy(\"adb\"))  # True\nprint(is_happy(\"xyy\"))  # False\nprint(is_happy(\"xyzz\"))  # True\nprint(is_happy(\"xyzxyz\"))  # False\nprint(is_happy(\"abcabcabc\"))  # True\nprint(is_happy(\"abababab\"))  # False\nprint(is_happy(\"abcabcabcabcabcabc\"))  # True\nprint(is_happy(\"abcabcabcabcabcabcabc\"))  # False\nprint(is_happy(\"abcabcabcabcabcabcabcabc\"))  # True\nprint(ishappy(\"abcabcabcabcabcabcabcabcabc\"))  # False\nprint(is_happy(\"abcabcabcabcabcabcabcabcabcabc\"))  # True\nprint(is_happy(\"abcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(is_happy(\"abcabcabcabcabcabcabcabcabcabcabcabc\"))  # True\nprint(is_happy(\"abcabcabcabcabcabcabcabcabcabcabcabcabc\"))  # False\nprint(is_happy(\"abcabcabcabcabcabcabcabc"}
{"task_id": "HumanEval/125", "completion": "\ndef split_words(txt):\n    '''\n    Given a string of words, return a list of words split on whitespace, if no whitespaces exists in the text you\n    should split on commas ',' if no commas exists you should return the number of lower-case letters with odd order in the\n    alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n    Examples\n    split_words(\"Hello world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"Hello,world!\") ➞ [\"Hello\", \"world!\"]\n    split_words(\"abcdef\") == 3 \n    '''\n    if ' ' in txt:\n        return txt.split(' ')\n    elif ',' in txt:\n        return txt.split(',')\n    else:\n        return sum([1 for c in txt if c.islower() and (ord(c) - ord('a')) % 2 != 0])\n\nprint(split_words(\"Hello world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"Hello,world!\"))\nprint(split_words(\"abcdef\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\"abc,def\"))\nprint(split_words(\""}
{"task_id": "HumanEval/14", "completion": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> all_prefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n    return [string[:i] for i in range(1, len(string) + 1)]\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_all_prefixes.py\nimport unittest\nfrom all_prefixes import all_prefixes\n\nclass TestAllPrefixes(unittest.TestCase):\n\n    def test_all_prefixes(self):\n        self.assertEqual(all_prefixes('abc'), ['a', 'ab', 'abc'])\n        self.assertEqual(all_prefixes('abcd'), ['a', 'ab', 'abc', 'abcd'])\n        self.assertEqual(allimport unittest\nfrom all_prefixes import all_prefixes\n\nclass TestAllPrefixes(unittest.TestCase):\n\n    def test_all_prefixes(self):\n        self.assertEqual(all_prefixes('abc'), ['a', 'ab', 'abc'])\n        self.assertEqual(all_prefixes('abcd'), ['a', 'ab', 'abc', 'abcd'])\n        self.assertEqual(all_prefixes('abcde'), ['a', 'ab', 'abc', 'abcd', 'abcde'])\n\nif __name__ == '__main__':\n    unittest.main()import unittest\nfrom all_prefixes import all_prefixes\n\nclass TestAllPrefixes(unittest.TestCase):\n\n    def test_all_prefixes(self):\n        self.assertEqual(all_prefixes('abc'), ['a', 'ab', 'abc'])\n        self.assertEqual(all_prefixes('abcd'), ['a', 'ab', 'abc', 'abcd'])\n        self.assertEqual(all_prefixes('abcde'), ['a', 'ab', 'abc', 'abcd', 'abcde'])\n\nif __name__"}
{"task_id": "HumanEval/51", "completion": "\n\ndef remove_vowels(text):\n    \"\"\"\n    remove_vowels is a function that takes string and returns string without vowels.\n    >>> remove_vowels('')\n    ''\n    >>> remove_vowels(\"abcdef\\nghijklm\")\n    'bcdf\\nghjklm'\n    >>> remove_vowels('abcdef')\n    'bcdf'\n    >>> remove_vowels('aaaaa')\n    ''\n    >>> remove_vowels('aaBAA')\n    'B'\n    >>> remove_vowels('zbcd')\n    'zbcd'\n    \"\"\"\n    vowels = 'aeiouAEIOU'\n    result = ''\n    for char in text:\n        if char not in vowels:\n            result += char\n    return result\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#test_remove_vowels.py\nimport unittest\nfrom remove_vowels import remove_vowels\n\n\nclass TestRemoveVowels(unittest.TestCase):\n\n    def test_remove_vowels(self):\n        self.assertEqual(remove_vowels(''), '')\n        self.assertEqual(remove_vowels(\"abcdef\\nghijklm\"), 'bcdf\\nghjklm')\n        self.assertEqual(remove_vowels('abcdef'), 'bcdf')\n        self.assertEqual(remove_vowels('aaaaa'), '')\n        self.assertEqual(remove_vowels('aaBAA'), 'B')\n        self.assertEqual(remove_vowels('zbcd'), 'zbcd')\n\n\nif __name__ == \"__main__\":\n    unittest.main()import unittest\nfrom remove_vowels import remove_vowels\n\n\nclass TestRemoveVowels(unittest.TestCase):\n\n    def test_remove_vowels(self):\n        self.assertEqual(remove_vowels(''), '')\n        self.assertEqual"}
{"task_id": "HumanEval/90", "completion": "\ndef next_smallest(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    lst.sort()\n    return lst[1]\n\n\ndef next_smallest_v2(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) == None\n    \"\"\"\n    if len(lst) < 2:\n        return None\n    smallest = second_smallest = float('inf')\n    for num in lst:\n        if num < smallest:\n            second_smallest = smallest\n            smallest = num\n        elif num < second_smallest and num != smallest:\n            second_smallest = num\n    return second_smallest if second_smallest != float('inf') else None\n\n\ndef next_smallest_v3(lst):\n    \"\"\"\n    You are given a list of integers.\n    Write a function next_smallest() that returns the 2nd smallest element of the list.\n    Return None if there is no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5, 1, 4,"}
{"task_id": "HumanEval/130", "completion": "\ndef tri(n):\n    \"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians in \n    the last couple centuries. However, what people don't know is Tribonacci sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) = 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2) + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n    tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 = 8 \n    You are given a non-negative integer number n, you have to a return a list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n    tri(3) = [1, 3, 2, 8]\n    \"\"\"\n    if n == 0:\n        return [0]\n    elif n == 1:\n        return [0, 3]\n    elif n == 2:\n        return [0, 3, 2]\n    else:\n        tri_seq = [0, 3, 2]\n        for i in range(3, n + 1):\n            if i % 2 == 0:\n                tri_seq.append(1 + i // 2)\n            else:\n                tri_seq.append(tri_seq[-1] + tri_seq[-2] + tri_seq[-3])\n        return tri_seq\n\n\nprint(tri(3))\nprint(tri(4))\nprint(tri(5))\nprint(tri(6))\nprint(tri(7))\nprint(tri(8))\nprint(tri(9))\nprint(tri(10))\nprint(tri(11))\nprint(tri(12))\nprint(tri(13))\nprint(tri(14))\nprint(tri(15))\nprint(tri"}
{"task_id": "HumanEval/163", "completion": "\ndef generate_integers(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers(2, 8) => [2, 4, 6, 8]\n    generate_integers(8, 2) => [2, 4, 6, 8]\n    generate_integers(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_v2(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_v2(2, 8) => [2, 4, 6, 8]\n    generate_integers_v2(8, 2) => [2, 4, 6, 8]\n    generate_integers_v2(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n\ndef generate_integers_v3(a, b):\n    \"\"\"\n    Given two positive integers a and b, return the even digits between a\n    and b, in ascending order.\n\n    For example:\n    generate_integers_v3(2, 8) => [2, 4, 6, 8]\n    generate_integers_v3(8, 2) => [2, 4, 6, 8]\n    generate_integers_v3(10, 14) => []\n    \"\"\"\n    if a > b:\n        a, b = b, a\n    return [i for i in range(a, b + 1) if i % 2 == 0]\n\n"}
{"task_id": "HumanEval/1", "completion": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    \"\"\" Input to this function is a string containing multiple groups of nested parentheses. Your goal is to\n    separate those group into separate strings and return the list of those.\n    Separate groups are balanced (each open brace is properly closed) and not nested within each other\n    Ignore any spaces in the input string.\n    >>> separate_paren_groups('( ) (( )) (( )( ))')\n    ['()', '(())', '(()())']\n    \"\"\"\n    paren_string = paren_string.replace(\" \", \"\")\n    groups = []\n    stack = []\n    start = 0\n    for i, char in enumerate(paren_string):\n        if char == '(':\n            if not stack:\n                start = i\n            stack.append(char)\n        elif char == ')':\n            stack.pop()\n            if not stack:\n                groups.append(paren_string[start:i+1])\n    return groups\n\n\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n\n#tests/test_separate_paren_groups.py\nimport unittest\nfrom separate_paren_groups import separate_paren_groups\n\nclass TestSeparateParenGroups(unittest.TestCase):\n\n    def test_separate_paren_groups(self):\n        self.assertEqual(separate_paren_groups('( ) (( )) (( )( ))'), ['()', '(())', '(()())'])\n        self.assertEqual(separate_paren_groups('((())) () (()(()))'), ['((()))', '()', '(()(()))'])\n        self.assertEqual(separate_paren_groups('() (()) ((())) ()'), ['()', '(())', '((()))', '()'])\n\nif __name__ == '__main__':\n    unittest.main()from typing import List\n\ndef find_duplicates(nums: List[int]) -> List[int"}
{"task_id": "HumanEval/36", "completion": "\n\ndef fizz_buzz(n: int):\n    \"\"\"Return the number of times the digit 7 appears in integers less than n which are divisible by 11 or 13.\n    >>> fizz_buzz(50)\n    0\n    >>> fizz_buzz(78)\n    2\n    >>> fizz_buzz(79)\n    3\n    \"\"\"\n    count = 0\n    for i in range(11, n):\n        if i % 11 == 0 or i % 13 == 0:\n            count += str(i).count('7')\n    return count\n\n\nif __name__ == \"__s__\":\n    import doctest\n    doctest.testmod()\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizzs__, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n    doctest.run_docstring_examples(fizz_buzz, globals(), verbose=True)\n   "}
{"task_id": "HumanEval/85", "completion": "\ndef add(lst):\n    \"\"\"Given a non-empty list of integers lst. add the even elements that are at odd indices..\n\n\n    Examples:\n        add([4, 2, 6, 7]) ==> 2 \n    \"\"\"\n    return sum(lst[i] for i in range(1, len(lst), 2) if lst[i] % 2 == 0)\n\n\nprint(add([4, 2, 6, 7]))  # 2\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))  # 14\nprint(add([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))  # 0\nprint(add([2, 1, 2, 1, 2, 1, 2, 1, 2, 1]))  # 2\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))  # 14\nprint(add([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))  # 0\nprint(add([2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1]))  # 2\nprint(add([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))  # 14\nprint(add([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]))  # 0\nprint(add([2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]))  # 2\nprint(add([1, 2, 3"}
